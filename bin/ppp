#!/bin/bash

set -e

D=/tmp/d0
rm -rf "$D"
mkdir -p "$D"
cd "$D"
git init .

cat > input

sed '/[Ee]xpected:/p;d' input| sed -r 's/.*[Ee]xpected:(.*) but:? was:?(.*)/\1\n\2/' > results

head -n1 results > plan
git add plan
git commit -m 'expected'
tail -n1 results > plan

git diff
echo '@@@@'
git diff --word-diff
echo '@@@@'
git diff --word-diff-regex=[a-zA-Z0-9_]+
echo '@@@@'
git diff --word-diff-regex=.

exit 0


java.lang.AssertionError: query #1: select count(distinct m1) from druid.foo where m1 < -1.0 expected:<GroupByQuery{dataSource='GroupByQuery{dataSource='foo', querySegmentSpec=MultipleIntervalSegmentSpec{intervals=[-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z]}, virtualColumns=[], limitSpec=NoopLimitSpec, dimFilter=m1 as numeric <= -1.0, granularity=AllGranularity, dimensions=[DefaultDimensionSpec{dimension='m1', outputName='d0', outputType='FLOAT'}], aggregatorSpecs=[], postAggregatorSpecs=[], havingSpec=null, context={}}', querySegmentSpec=MultipleIntervalSegmentSpec{intervals=[-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z]}, virtualColumns=[], limitSpec=NoopLimitSpec, dimFilter=null, granularity=AllGranularity, dimensions=[], aggregatorSpecs=[], postAggregatorSpecs=[], havingSpec=null, context={}}> but was:<GroupByQuery{dataSource='GroupByQuery{dataSource='foo', querySegmentSpec=MultipleIntervalSegmentSpec{intervals=[-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z]}, virtualColumns=[], limitSpec=NoopLimitSpec, dimFilter=m1 as numeric < -1.0, granularity=AllGranularity, dimensions=[DefaultDimensionSpec{dimension='m1', outputName='d0', outputType='FLOAT'}], aggregatorSpecs=[], postAggregatorSpecs=[], havingSpec=null, context={}}', querySegmentSpec=MultipleIntervalSegmentSpec{intervals=[-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z]}, virtualColumns=[], limitSpec=NoopLimitSpec, dimFilter=null, granularity=AllGranularity, dimensions=[], aggregatorSpecs=[CountAggregatorFactory{name='a0'}], postAggregatorSpecs=[], havingSpec=null, context={}}>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:120)
	at org.apache.druid.sql.calcite.QueryTestRunner$VerifyNativeQueries.verifyQuery(QueryTestRunner.java:409)
	at org.apache.druid.sql.calcite.QueryTestRunner$VerifyNativeQueries.verify(QueryTestRunner.java:371)
	at org.apache.druid.sql.calcite.QueryTestRunner.run(QueryTestRunner.java:694)
	at org.apache.druid.sql.calcite.QueryTestBuilder.run(QueryTestBuilder.java:307)
	at org.apache.druid.sql.calcite.BaseCalciteQueryTest.testQuery(BaseCalciteQueryTest.java:901)
	at org.apache.druid.sql.calcite.CalciteSelectQueryTest.testOrderThenLimitThenFilter12(CalciteSelectQueryTest.java:1964)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.apache.druid.sql.calcite.util.QueryLogHook$1.evaluate(QueryLogHook.java:113)
	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:258)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)

